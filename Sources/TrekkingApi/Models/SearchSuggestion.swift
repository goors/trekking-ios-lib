//
// AdventuresQuery.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class SearchSuggestion: Codable, JSONEncodable, Hashable {

    
    public var id: String
    public var orgId: String?
    public var text: String?
    public var origName: String?
    public var suggestionType: SearchSuggestionType
    public var highlight: String

    public init(id: String, suggestionType: SearchSuggestionType, orgId: String? = nil, text: String? = nil, origName: String? = nil, highlight: String) {
        self.id = id
        self.orgId = orgId
        self.text = text
        
        self.origName = origName
        self.suggestionType = suggestionType
        self.highlight = highlight
        
        
        
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case orgId
        case text
        case origName
        case suggestionType
        case highlight
        
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(orgId, forKey: .orgId)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encodeIfPresent(origName, forKey: .origName)
        try container.encodeIfPresent(suggestionType, forKey: .suggestionType)
        try container.encodeIfPresent(highlight, forKey: .highlight)
        
    }

    public static func == (lhs: SearchSuggestion, rhs: SearchSuggestion) -> Bool {
        lhs.id == rhs.id &&
        lhs.orgId == rhs.orgId &&
        lhs.text == rhs.text &&
        lhs.origName == rhs.origName &&
        lhs.suggestionType == rhs.suggestionType &&
        lhs.highlight == rhs.highlight
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id.hashValue)
        hasher.combine(orgId?.hashValue)
        hasher.combine(text?.hashValue)
        hasher.combine(origName?.hashValue)
        hasher.combine(suggestionType.hashValue)
        hasher.combine(highlight.hashValue)
        
        
    }
}
