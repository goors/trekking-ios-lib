//
// AdventureModelAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class AdventureModelAllOf: Codable, JSONEncodable, Hashable {

    static let titleRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    static let subTitleRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    static let textRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var title: String
    public var subTitle: String
    public var text: String
    public var coverPhoto: String?
    public var slug: String?
    public var commentsAllowed: Bool?
    public var isPublished: Bool?
    public var photos: [AdventurePhoto]?
    public var videos: [String]?

    public init(title: String, subTitle: String, text: String, coverPhoto: String? = nil, slug: String? = nil, commentsAllowed: Bool? = nil, isPublished: Bool? = nil, photos: [AdventurePhoto]? = nil, videos: [String]? = nil) {
        self.title = title
        self.subTitle = subTitle
        self.text = text
        self.coverPhoto = coverPhoto
        self.slug = slug
        self.commentsAllowed = commentsAllowed
        self.isPublished = isPublished
        self.photos = photos
        self.videos = videos
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case title
        case subTitle
        case text
        case coverPhoto
        case slug
        case commentsAllowed
        case isPublished
        case photos
        case videos
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(title, forKey: .title)
        try container.encode(subTitle, forKey: .subTitle)
        try container.encode(text, forKey: .text)
        try container.encodeIfPresent(coverPhoto, forKey: .coverPhoto)
        try container.encodeIfPresent(slug, forKey: .slug)
        try container.encodeIfPresent(commentsAllowed, forKey: .commentsAllowed)
        try container.encodeIfPresent(isPublished, forKey: .isPublished)
        try container.encodeIfPresent(photos, forKey: .photos)
        try container.encodeIfPresent(videos, forKey: .videos)
    }

    public static func == (lhs: AdventureModelAllOf, rhs: AdventureModelAllOf) -> Bool {
        lhs.title == rhs.title &&
        lhs.subTitle == rhs.subTitle &&
        lhs.text == rhs.text &&
        lhs.coverPhoto == rhs.coverPhoto &&
        lhs.slug == rhs.slug &&
        lhs.commentsAllowed == rhs.commentsAllowed &&
        lhs.isPublished == rhs.isPublished &&
        lhs.photos == rhs.photos &&
        lhs.videos == rhs.videos
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(title.hashValue)
        hasher.combine(subTitle.hashValue)
        hasher.combine(text.hashValue)
        hasher.combine(coverPhoto?.hashValue)
        hasher.combine(slug?.hashValue)
        hasher.combine(commentsAllowed?.hashValue)
        hasher.combine(isPublished?.hashValue)
        hasher.combine(photos?.hashValue)
        hasher.combine(videos?.hashValue)
        
    }
}

