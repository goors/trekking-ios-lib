//
// NominatimResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class NominatimResponse: Codable, JSONEncodable, Hashable {

    public var placeId: Int?
    public var osmType: String?
    public var geojson: AnyCodable?
    public var displayName: String?
    public var address: AddressResultResponse?

    public init(placeId: Int? = nil, osmType: String? = nil, geojson: AnyCodable? = nil, displayName: String? = nil, address: AddressResultResponse? = nil) {
        self.placeId = placeId
        self.osmType = osmType
        self.geojson = geojson
        self.displayName = displayName
        self.address = address
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case placeId = "place_id"
        case osmType = "osm_type"
        case geojson
        case displayName = "display_name"
        case address
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(placeId, forKey: .placeId)
        try container.encodeIfPresent(osmType, forKey: .osmType)
        try container.encodeIfPresent(geojson, forKey: .geojson)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(address, forKey: .address)
    }

    public static func == (lhs: NominatimResponse, rhs: NominatimResponse) -> Bool {
        lhs.placeId == rhs.placeId &&
        lhs.osmType == rhs.osmType &&
        lhs.geojson == rhs.geojson &&
        lhs.displayName == rhs.displayName &&
        lhs.address == rhs.address
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(placeId?.hashValue)
        hasher.combine(osmType?.hashValue)
        hasher.combine(geojson?.hashValue)
        hasher.combine(displayName?.hashValue)
        hasher.combine(address?.hashValue)
        
    }
}

