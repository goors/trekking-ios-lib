//
// ActivityRecordPoi.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class ActivityRecordPoi: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var text: String?
    public var title: String?
    public var photos: [String]?
    public var type: ActivityRecordPoiType?

    public init(id: String? = nil, text: String? = nil, title: String? = nil, photos: [String]? = nil, type: ActivityRecordPoiType? = nil) {
        self.id = id
        self.text = text
        self.title = title
        self.photos = photos
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case text
        case title
        case photos
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(photos, forKey: .photos)
        try container.encodeIfPresent(type, forKey: .type)
    }

    public static func == (lhs: ActivityRecordPoi, rhs: ActivityRecordPoi) -> Bool {
        lhs.id == rhs.id &&
        lhs.text == rhs.text &&
        lhs.title == rhs.title &&
        lhs.photos == rhs.photos &&
        lhs.type == rhs.type
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id?.hashValue)
        hasher.combine(text?.hashValue)
        hasher.combine(title?.hashValue)
        hasher.combine(photos?.hashValue)
        hasher.combine(type?.hashValue)
        
    }
}

