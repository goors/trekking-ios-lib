//
// AdventureLightModelBaseInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class AdventureLightModelBaseInfo: Codable, JSONEncodable, Hashable {

    public var title: String?
    public var subTitle: String?
    public var level: AdventureLightModelBaseInfoLevel?
    public var coverPhoto: String?
    public var commentsAllowed: Bool?
    public var isPublished: Bool?
    public var isRecommended: Bool?

    public init(title: String? = nil, subTitle: String? = nil, level: AdventureLightModelBaseInfoLevel? = nil, coverPhoto: String? = nil, commentsAllowed: Bool? = nil, isPublished: Bool? = nil, isRecommended: Bool? = nil) {
        self.title = title
        self.subTitle = subTitle
        self.level = level
        self.coverPhoto = coverPhoto
        self.commentsAllowed = commentsAllowed
        self.isPublished = isPublished
        self.isRecommended = isRecommended
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case title
        case subTitle
        case level
        case coverPhoto
        case commentsAllowed
        case isPublished
        case isRecommended
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(subTitle, forKey: .subTitle)
        try container.encodeIfPresent(level, forKey: .level)
        try container.encodeIfPresent(coverPhoto, forKey: .coverPhoto)
        try container.encodeIfPresent(commentsAllowed, forKey: .commentsAllowed)
        try container.encodeIfPresent(isPublished, forKey: .isPublished)
        try container.encodeIfPresent(isRecommended, forKey: .isRecommended)
    }

    public static func == (lhs: AdventureLightModelBaseInfo, rhs: AdventureLightModelBaseInfo) -> Bool {
        lhs.title == rhs.title &&
        lhs.subTitle == rhs.subTitle &&
        lhs.level == rhs.level &&
        lhs.coverPhoto == rhs.coverPhoto &&
        lhs.commentsAllowed == rhs.commentsAllowed &&
        lhs.isPublished == rhs.isPublished &&
        lhs.isRecommended == rhs.isRecommended
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(title?.hashValue)
        hasher.combine(subTitle?.hashValue)
        hasher.combine(level?.hashValue)
        hasher.combine(coverPhoto?.hashValue)
        hasher.combine(commentsAllowed?.hashValue)
        hasher.combine(isPublished?.hashValue)
        hasher.combine(isRecommended?.hashValue)
        
    }
}

