//
// AdventuresQuery.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class AdventuresQuery: Codable, JSONEncodable, Hashable {

    static let sortRule = StringRule(minLength: 0, maxLength: 200, pattern: nil)
    static let pageRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    static let pageSizeRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    static let maxItemCountRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    static let textRule = StringRule(minLength: 0, maxLength: 200, pattern: nil)
    public var sort: String?
    public var page: Int?
    public var pageSize: Int?
    public var maxItemCount: Int?
    public var text: String?
    public var createdTime: SearchQueryRangeOfDateTime?
    public var updatedTime: SearchQueryRangeOfDateTime?
    public var all: Bool?
    public var recommended: Bool?
    public var fields: Int

    public init(sort: String? = nil, page: Int? = nil, pageSize: Int? = nil, maxItemCount: Int? = nil, text: String? = nil, createdTime: SearchQueryRangeOfDateTime? = nil, updatedTime: SearchQueryRangeOfDateTime? = nil, all: Bool? = nil, recommended: Bool? = nil, fields: Int = 0) {
        self.sort = sort
        self.page = page
        self.pageSize = pageSize
        self.maxItemCount = maxItemCount
        self.text = text
        self.createdTime = createdTime
        self.updatedTime = updatedTime
        self.all = all
        self.recommended = recommended
        self.fields = fields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sort
        case page
        case pageSize
        case maxItemCount
        case text
        case createdTime
        case updatedTime
        case all
        case recommended
        case fields
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sort, forKey: .sort)
        try container.encodeIfPresent(page, forKey: .page)
        try container.encodeIfPresent(pageSize, forKey: .pageSize)
        try container.encodeIfPresent(maxItemCount, forKey: .maxItemCount)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(updatedTime, forKey: .updatedTime)
        try container.encodeIfPresent(all, forKey: .all)
        try container.encodeIfPresent(recommended, forKey: .recommended)
        try container.encodeIfPresent(fields, forKey: .fields)
    }

    public static func == (lhs: AdventuresQuery, rhs: AdventuresQuery) -> Bool {
        lhs.sort == rhs.sort &&
        lhs.page == rhs.page &&
        lhs.pageSize == rhs.pageSize &&
        lhs.maxItemCount == rhs.maxItemCount &&
        lhs.text == rhs.text &&
        lhs.createdTime == rhs.createdTime &&
        lhs.updatedTime == rhs.updatedTime &&
        lhs.all == rhs.all &&
        lhs.recommended == rhs.recommended &&
        lhs.fields == rhs.fields
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(sort?.hashValue)
        hasher.combine(page?.hashValue)
        hasher.combine(pageSize?.hashValue)
        hasher.combine(maxItemCount?.hashValue)
        hasher.combine(text?.hashValue)
        hasher.combine(createdTime?.hashValue)
        hasher.combine(updatedTime?.hashValue)
        hasher.combine(all?.hashValue)
        hasher.combine(recommended?.hashValue)
        hasher.combine(fields.hashValue)
        
    }
}

