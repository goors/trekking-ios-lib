//
// AdventuresLightModelAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class AdventuresLightModelAllOf: Codable, JSONEncodable, Hashable {

    public var baseInfo: AdventuresLightModelAllOfBaseInfo?
    public var geoInfo: AdventuresLightModelAllOfGeoInfo?
    public var category: AdventuresLightModelAllOfCategory?
    public var mediaInfo: AdventuresLightModelAllOfMediaInfo?
    public var userProfile: AdventuresLightModelAllOfUserProfile?
    public var rawData: String?
    public var trekk: AnyCodable?
    public var slug: String?

    public init(baseInfo: AdventuresLightModelAllOfBaseInfo? = nil, geoInfo: AdventuresLightModelAllOfGeoInfo? = nil, category: AdventuresLightModelAllOfCategory? = nil, mediaInfo: AdventuresLightModelAllOfMediaInfo? = nil, userProfile: AdventuresLightModelAllOfUserProfile? = nil, rawData: String? = nil, trekk: AnyCodable? = nil, slug: String? = nil) {
        self.baseInfo = baseInfo
        self.geoInfo = geoInfo
        self.category = category
        self.mediaInfo = mediaInfo
        self.userProfile = userProfile
        self.rawData = rawData
        self.trekk = trekk
        self.slug = slug
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case baseInfo
        case geoInfo
        case category
        case mediaInfo
        case userProfile
        case rawData
        case trekk
        case slug
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(baseInfo, forKey: .baseInfo)
        try container.encodeIfPresent(geoInfo, forKey: .geoInfo)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(mediaInfo, forKey: .mediaInfo)
        try container.encodeIfPresent(userProfile, forKey: .userProfile)
        try container.encodeIfPresent(rawData, forKey: .rawData)
        try container.encodeIfPresent(trekk, forKey: .trekk)
        try container.encodeIfPresent(slug, forKey: .slug)
    }

    public static func == (lhs: AdventuresLightModelAllOf, rhs: AdventuresLightModelAllOf) -> Bool {
        lhs.baseInfo == rhs.baseInfo &&
        lhs.geoInfo == rhs.geoInfo &&
        lhs.category == rhs.category &&
        lhs.mediaInfo == rhs.mediaInfo &&
        lhs.userProfile == rhs.userProfile &&
        lhs.rawData == rhs.rawData &&
        lhs.trekk == rhs.trekk &&
        lhs.slug == rhs.slug
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(baseInfo?.hashValue)
        hasher.combine(geoInfo?.hashValue)
        hasher.combine(category?.hashValue)
        hasher.combine(mediaInfo?.hashValue)
        hasher.combine(userProfile?.hashValue)
        hasher.combine(rawData?.hashValue)
        hasher.combine(trekk?.hashValue)
        hasher.combine(slug?.hashValue)
        
    }
}

