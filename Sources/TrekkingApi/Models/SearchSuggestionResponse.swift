//
// AdventuresQuery.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class SearchSuggestionResponse: Codable, JSONEncodable, Hashable {

    
    public var users: [SearchSuggestionResponseUser]
    public var categories: [SearchSuggestionResponseCategory]
    public var adventures: [SearchSuggestionResponseAdventure]
    public var countries: [SearchSuggestionResponseCountry]
   

    public init(
        users: [SearchSuggestionResponseUser],
        categories: [SearchSuggestionResponseCategory],
        adventures: [SearchSuggestionResponseAdventure],
        countries: [SearchSuggestionResponseCountry]
    ) {
        self.users = users
        self.categories = categories
        self.adventures = adventures
        self.countries = countries
        
        
        
        
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case users
        case categories
        case adventures
        case countries
        
        
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(users, forKey: .users)
        try container.encodeIfPresent(categories, forKey: .categories)
        try container.encodeIfPresent(adventures, forKey: .adventures)
        try container.encodeIfPresent(countries, forKey: .countries)
        
        
    }

    public static func == (lhs: SearchSuggestionResponse, rhs: SearchSuggestionResponse) -> Bool {
        lhs.users == rhs.users &&
        lhs.categories == rhs.categories &&
        lhs.adventures == rhs.adventures &&
        lhs.countries == rhs.countries
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(users.hashValue)
        hasher.combine(categories.hashValue)
        hasher.combine(adventures.hashValue)
        hasher.combine(countries.hashValue)
        
        
        
    }
}
