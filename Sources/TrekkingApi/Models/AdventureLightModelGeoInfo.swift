//
// AdventureLightModelGeoInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class AdventureLightModelGeoInfo: Codable, JSONEncodable, Hashable {

    public var altitudes: [Double]?
    public var activityRecords: [ActivityRecord]?
    public var start: AnyCodable?
    public var end: AnyCodable?
    public var bearing: Double?

    public init(altitudes: [Double]? = nil, activityRecords: [ActivityRecord]? = nil, start: AnyCodable? = nil, end: AnyCodable? = nil, bearing: Double? = nil) {
        self.altitudes = altitudes
        self.activityRecords = activityRecords
        self.start = start
        self.end = end
        self.bearing = bearing
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case altitudes
        case activityRecords
        case start
        case end
        case bearing
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(altitudes, forKey: .altitudes)
        try container.encodeIfPresent(activityRecords, forKey: .activityRecords)
        try container.encodeIfPresent(start, forKey: .start)
        try container.encodeIfPresent(end, forKey: .end)
        try container.encodeIfPresent(bearing, forKey: .bearing)
    }

    public static func == (lhs: AdventureLightModelGeoInfo, rhs: AdventureLightModelGeoInfo) -> Bool {
        lhs.altitudes == rhs.altitudes &&
        lhs.activityRecords == rhs.activityRecords &&
        lhs.start == rhs.start &&
        lhs.end == rhs.end &&
        lhs.bearing == rhs.bearing
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(altitudes?.hashValue)
        hasher.combine(activityRecords?.hashValue)
        hasher.combine(start?.hashValue)
        hasher.combine(end?.hashValue)
        hasher.combine(bearing?.hashValue)
        
    }
}

