//
// AddressResultResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class AddressResultResponse: Codable, JSONEncodable, Hashable {

    public var country: String?
    public var countryCode: String?
    public var postcode: String?
    public var state: String?
    public var town: String?
    public var city: String?

    public init(country: String? = nil, countryCode: String? = nil, postcode: String? = nil, state: String? = nil, town: String? = nil, city: String? = nil) {
        self.country = country
        self.countryCode = countryCode
        self.postcode = postcode
        self.state = state
        self.town = town
        self.city = city
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case country
        case countryCode = "country_code"
        case postcode
        case state
        case town
        case city
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(postcode, forKey: .postcode)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(town, forKey: .town)
        try container.encodeIfPresent(city, forKey: .city)
    }

    public static func == (lhs: AddressResultResponse, rhs: AddressResultResponse) -> Bool {
        lhs.country == rhs.country &&
        lhs.countryCode == rhs.countryCode &&
        lhs.postcode == rhs.postcode &&
        lhs.state == rhs.state &&
        lhs.town == rhs.town &&
        lhs.city == rhs.city
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(country?.hashValue)
        hasher.combine(countryCode?.hashValue)
        hasher.combine(postcode?.hashValue)
        hasher.combine(state?.hashValue)
        hasher.combine(town?.hashValue)
        hasher.combine(city?.hashValue)
        
    }
}

