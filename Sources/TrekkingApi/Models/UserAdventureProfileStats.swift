//
// AdventuresQuery.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class UserAdventureProfileStats: Codable, JSONEncodable, Hashable {

    
    public var totalDistance: Double?
    public var maxSpeed: Double?
    public var minSpeed: Double?
    public var maxAltitude: Double?
    public var minAltitude: Double?
    public var adventuresCount: Double?
    
    
    
   

    public init(
        totalDistance: Double? = nil,
        maxSpeed: Double? = nil,
        minSpeed: Double? = nil,
        maxAltitude: Double? = nil,
        minAltitude: Double? = nil,
        adventuresCount: Double? = nil
    ) {
        self.totalDistance = totalDistance
        self.maxSpeed = maxSpeed
        self.minSpeed = minSpeed
        self.maxAltitude = maxAltitude
        self.minAltitude = minAltitude
        self.adventuresCount = adventuresCount
        
        
        
        
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case totalDistance
        case maxSpeed
        case minSpeed
        case maxAltitude
        case minAltitude
        case adventuresCount
        
        
        
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(totalDistance, forKey: .totalDistance)
        try container.encodeIfPresent(maxSpeed, forKey: .maxSpeed)
        try container.encodeIfPresent(minSpeed, forKey: .minSpeed)
        try container.encodeIfPresent(maxAltitude, forKey: .maxAltitude)
        try container.encodeIfPresent(minAltitude, forKey: .minAltitude)
        try container.encodeIfPresent(adventuresCount, forKey: .adventuresCount)
        
        
        
    }

    public static func == (lhs: UserAdventureProfileStats, rhs: UserAdventureProfileStats) -> Bool {
        lhs.totalDistance == rhs.totalDistance &&
        lhs.maxSpeed == rhs.maxSpeed &&
        lhs.minSpeed == rhs.minSpeed &&
        lhs.maxAltitude == rhs.maxAltitude &&
        lhs.minAltitude == rhs.minAltitude &&
        lhs.adventuresCount == rhs.adventuresCount
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(totalDistance?.hashValue)
        hasher.combine(maxSpeed?.hashValue)
        hasher.combine(minSpeed?.hashValue)
        hasher.combine(maxAltitude?.hashValue)
        hasher.combine(minAltitude?.hashValue)
        hasher.combine(adventuresCount?.hashValue)
        
        
        
        
    }
}
