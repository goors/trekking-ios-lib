//
// AuthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthAPI {

    /**

     - parameter userUpdateDeviceId: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addDevice(userUpdateDeviceId: UserUpdateDeviceId, apiResponseQueue: DispatchQueue = TrekkingApiAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return addDeviceWithRequestBuilder(userUpdateDeviceId: userUpdateDeviceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2.0/Auth/Device
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: JWT
     - parameter userUpdateDeviceId: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func addDeviceWithRequestBuilder(userUpdateDeviceId: UserUpdateDeviceId) -> RequestBuilder<String> {
        let localVariablePath = "/api/v2.0/Auth/Device"
        let localVariableURLString = TrekkingApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userUpdateDeviceId)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = TrekkingApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter userCredentials: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticate(userCredentials: UserCredentials, apiResponseQueue: DispatchQueue = TrekkingApiAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticateWithRequestBuilder(userCredentials: userCredentials).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2.0/Auth/Authentication
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: JWT
     - parameter userCredentials: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func authenticateWithRequestBuilder(userCredentials: UserCredentials) -> RequestBuilder<String> {
        let localVariablePath = "/api/v2.0/Auth/Authentication"
        let localVariableURLString = TrekkingApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userCredentials)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = TrekkingApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func checkIfEmailExist(body: String, apiResponseQueue: DispatchQueue = TrekkingApiAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return checkIfEmailExistWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2.0/Auth/EmailCheck
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: JWT
     - parameter body: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func checkIfEmailExistWithRequestBuilder(body: String) -> RequestBuilder<String> {
        let localVariablePath = "/api/v2.0/Auth/EmailCheck"
        let localVariableURLString = TrekkingApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = TrekkingApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter email: (query)  (optional)
     - parameter token: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func confirmEmail(email: String? = nil, token: String? = nil, apiResponseQueue: DispatchQueue = TrekkingApiAPI.apiResponseQueue, completion: @escaping ((_ data: Bool?, _ error: Error?) -> Void)) -> RequestTask {
        return confirmEmailWithRequestBuilder(email: email, token: token).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2.0/Auth/EmailConfirm
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: JWT
     - parameter email: (query)  (optional)
     - parameter token: (query)  (optional)
     - returns: RequestBuilder<Bool> 
     */
    open class func confirmEmailWithRequestBuilder(email: String? = nil, token: String? = nil) -> RequestBuilder<Bool> {
        let localVariablePath = "/api/v2.0/Auth/EmailConfirm"
        let localVariableURLString = TrekkingApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "email": (wrappedValue: email?.encodeToJSON(), isExplode: true),
            "token": (wrappedValue: token?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = TrekkingApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter photoId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserPhoto(photoId: String, apiResponseQueue: DispatchQueue = TrekkingApiAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserPhotoWithRequestBuilder(photoId: photoId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2.0/Auth/Photo/{photoId}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: JWT
     - parameter photoId: (path)  
     - returns: RequestBuilder<String> 
     */
    open class func getUserPhotoWithRequestBuilder(photoId: String) -> RequestBuilder<String> {
        var localVariablePath = "/api/v2.0/Auth/Photo/{photoId}"
        let photoIdPreEscape = "\(APIHelper.mapValueToPathItem(photoId))"
        let photoIdPostEscape = photoIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{photoId}", with: photoIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TrekkingApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = TrekkingApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserPhotoByEmail(body: String, apiResponseQueue: DispatchQueue = TrekkingApiAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserPhotoByEmailWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2.0/Auth/Photo
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: JWT
     - parameter body: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func getUserPhotoByEmailWithRequestBuilder(body: String) -> RequestBuilder<String> {
        let localVariablePath = "/api/v2.0/Auth/Photo"
        let localVariableURLString = TrekkingApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = TrekkingApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter role: (form)  (optional)
     - parameter password: (form)  (optional)
     - parameter photo: (form)  (optional)
     - parameter email: (form)  (optional)
     - parameter firstName: (form)  (optional)
     - parameter lastname: (form)  (optional)
     - parameter news: (form)  (optional)
     - parameter title: (form)  (optional)
     - parameter deviceId: (form)  (optional)
     - parameter deviceType: (form)  (optional)
     - parameter photoId: (form)  (optional)
     - parameter shareProfile: (form)  (optional)
     - parameter shareActivities: (form)  (optional)
     - parameter syncStatus: (form)  (optional)
     - parameter id: (form)  (optional)
     - parameter internalDbId: (form)  (optional)
     - parameter createdAt: (form)  (optional)
     - parameter updatedAt: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func register(role: UserRole? = nil, password: String? = nil, photo: URL? = nil, email: String? = nil, firstName: String? = nil, lastname: String? = nil, news: Bool? = nil, title: String? = nil, deviceId: String? = nil, deviceType: UserDeviceType? = nil, photoId: String? = nil, shareProfile: Bool? = nil, shareActivities: Bool? = nil, syncStatus: Bool? = nil, id: String? = nil, internalDbId: Int64? = nil, createdAt: Date? = nil,
                             updatedAt: Date? = nil,
                             country: String? = nil,
                             city: String? = nil,
                             zip: String? = nil,
                             locality: String? = nil,
                             osmId: Int? = nil,
                             apiResponseQueue: DispatchQueue = TrekkingApiAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return registerWithRequestBuilder(role: role, password: password, photo: photo, email: email, firstName: firstName, lastname: lastname, news: news, title: title, deviceId: deviceId, deviceType: deviceType, photoId: photoId, shareProfile: shareProfile, shareActivities: shareActivities, syncStatus: syncStatus, id: id, internalDbId: internalDbId, createdAt: createdAt, updatedAt: updatedAt).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2.0/Auth/Registration
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: JWT
     - parameter role: (form)  (optional)
     - parameter password: (form)  (optional)
     - parameter photo: (form)  (optional)
     - parameter email: (form)  (optional)
     - parameter firstName: (form)  (optional)
     - parameter lastname: (form)  (optional)
     - parameter news: (form)  (optional)
     - parameter title: (form)  (optional)
     - parameter deviceId: (form)  (optional)
     - parameter deviceType: (form)  (optional)
     - parameter photoId: (form)  (optional)
     - parameter shareProfile: (form)  (optional)
     - parameter shareActivities: (form)  (optional)
     - parameter syncStatus: (form)  (optional)
     - parameter id: (form)  (optional)
     - parameter internalDbId: (form)  (optional)
     - parameter createdAt: (form)  (optional)
     - parameter updatedAt: (form)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func registerWithRequestBuilder(role: UserRole? = nil, password: String? = nil, photo: URL? = nil, email: String? = nil, firstName: String? = nil, lastname: String? = nil, news: Bool? = nil, title: String? = nil, deviceId: String? = nil, deviceType: UserDeviceType? = nil, photoId: String? = nil, shareProfile: Bool? = nil, shareActivities: Bool? = nil, syncStatus: Bool? = nil, id: String? = nil, internalDbId: Int64? = nil, createdAt: Date? = nil, updatedAt: Date? = nil,
                                               country: String? = nil,
                                               city: String? = nil,
                                               zip: String? = nil,
                                               locality: String? = nil,
                                               osmId: Int? = nil
    
    ) -> RequestBuilder<String> {
        let localVariablePath = "/api/v2.0/Auth/Registration"
        let localVariableURLString = TrekkingApiAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "Role": role?.encodeToJSON(),
            "Password": password?.encodeToJSON(),
            "Photo": photo?.encodeToJSON(),
            "Email": email?.encodeToJSON(),
            "FirstName": firstName?.encodeToJSON(),
            "Lastname": lastname?.encodeToJSON(),
            "News": news?.encodeToJSON(),
            "Title": title?.encodeToJSON(),
            "DeviceId": deviceId?.encodeToJSON(),
            "DeviceType": deviceType?.encodeToJSON(),
            "PhotoId": photoId?.encodeToJSON(),
            "ShareProfile": shareProfile?.encodeToJSON(),
            "ShareActivities": shareActivities?.encodeToJSON(),
            "SyncStatus": syncStatus?.encodeToJSON(),
            "Id": id?.encodeToJSON(),
            "InternalDbId": internalDbId?.encodeToJSON(),
            "CreatedAt": createdAt?.encodeToJSON(),
            "UpdatedAt": updatedAt?.encodeToJSON(),
            "Country": country?.encodeToJSON(),
            "City": city?.encodeToJSON(),
            "Zip": zip?.encodeToJSON(),
            "Locality": locality?.encodeToJSON(),
            "OsmId": osmId?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = TrekkingApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
